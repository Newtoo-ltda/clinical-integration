const OpenAI = require('openai');
const axios = require("axios");
const api = require('./Service/api');

const openai = new OpenAI({
  apiKey: "SUA-CHAVE-API-AQUI"
});

const cancelAppointment = async (appointmentId, client, from) => {
  try {
    await api.patch(`/schedules/${appointmentId}`, { status: 'canceled' });
    await client.sendText(from, 'Your appointment has been successfully canceled.');
  } catch (error) {
    console.error('Error canceling appointment:', error);
    await client.sendText(from, 'There was an error canceling your appointment. Please try again later.');
  }
};
const confirmAppointment = async (appointmentId, client, from) => {
  try {
    await api.patch(`/schedules/${appointmentId}`, { status: 'confirmed' });
    await client.sendText(from, 'Your appointment has been successfully canceled.');
  } catch (error) {
    console.error('Error canceling appointment:', error);
    await client.sendText(from, 'There was an error canceling your appointment. Please try again later.');
  }
};

const contarTokens = (data) => {
  const stringData = JSON.stringify(data);
  return stringData.length; 
};

const agent = new (require("https").Agent)({ keepAlive: true });


const procedimentos = async () => {
  try {
    const response = await axios.get(
        "https://cpp.focuscw.com.br/datasnap/rest/TEntityController/valorprocedimentos", 
        { timeout: 120000, httpsAgent: agent }
    );
    
    // Verificar se os dados foram recebidos corretamente
    if (!response.data || !Array.isArray(response.data)) {
      console.error("Dados de procedimentos inv√°lidos ou ausentes", response.data);
      return []; // Retorna um array vazio em caso de erro
    }

    // Filtra os dados para conter apenas os procedimentos que possuem o campo 'convenios'
    const filteredData = response.data
        .filter(procedimento => 
            procedimento.grupoProcedimento !== "SEM GRUPO" && 
            !/^[zZ]/.test(procedimento.nomeProcedimento) &&
            procedimento.convenios && procedimento.convenios.length > 0 // Garante que 'convenios' existe e n√£o est√° vazio
        )
        .map(({ idProcedimento, nomeProcedimento, convenios }) => {
            const nomeSplit = nomeProcedimento.split(' ').slice(0, 4).join(' ');
            //console.log("Nome do procedimento:", nomeSplit);
            const conveniosData = convenios.map(({ idConvenio,nomeConvenio, valor }) => ({
                idConvenio,
                nomeConvenio,
                valor
            }));
            //console.log("Conv√™nios do procedimento:", conveniosData);
            return {
                idProcedimento,
                nomeProcedimento: nomeSplit,
                convenios: conveniosData
            };
        });

    //console.log("Procedimentos filtrados:", filteredData);
    return filteredData;
  } catch (error) {
      console.error("Error fetching procedimentos:", error);
  }
};


const especialidades = async () => {
  try {
      const response = await axios.get(
          "https://cpp.focuscw.com.br/datasnap/rest/TEntityController/especialidades", 
          { timeout: 120000, httpsAgent: agent }
      );

      const filteredData = response.data.filter(especialidade => especialidade.abreAgenda === "true")
        .map(({ idEspecialidade, nomeEspecialidade }) => ({
          idEspecialidade,
          nomeEspecialidade
        }));
      
      return filteredData;
  } catch (error) {
      console.error("Error fetching especialidades:", error);
      throw error;
  }
};


const convenios = async () => {
    try {
        const response = await axios.get("https://cpp.focuscw.com.br/datasnap/rest/TEntityController/convenios", { timeout: 120000, httpsAgent: agent });
        const filteredData = response.data.map(convenio => ({
            idConvenio: convenio.idConvenio,
            nomeConvenio: convenio.nomeConvenio
        }));
        //console.log(filteredData);
        const tokenCount = contarTokens(filteredData);
        //console.log("Procedimentos token count:", tokenCount);
        return filteredData
    } catch (error) {
        console.error("Error fetching convenios:", error);
    }
};

const profissionais = async () => {
    try {
        const response = await axios.get("https://cpp.focuscw.com.br/datasnap/rest/TEntityController/profissionais", { timeout: 120000, httpsAgent: agent });

        // Filtra apenas os profissionais com situacaoProfissional === 'Ativo'
        const activeProfessionals = response.data.filter(profissional => profissional.situacaoProfissional === "Ativo");

        // Remove profissionais cujo nome come√ßa com "z" ou "Z"
        const filteredProfessionals = activeProfessionals.filter(profissional => !/^[zZ]/.test(profissional.nomeProfissional));

        const filteredData = filteredProfessionals.map(profissional => ({
          idProfissional: profissional.idProfissional,
          nomeProfissional: profissional.nomeProfissional,
          especialidades: profissional.especialidades?.map(e => ({
              idEspecialidade: e.idEspecialidade,
              nomeEspecialidade: e.nomeEspecialidade
          })) || [],
          horarios: profissional.horarios?.map(h => ({
              idUnidade: h.idUnidade,
              diaSemana: h.diaSemana, // Renomeando dia para diaSemana
              inicioHorario: h.inicioHorario, // Renomeando horaInicio
              finalHorario: h.finalHorario // Renomeando horaFim
          })) || []
      }));

        const tokenCount = contarTokens(filteredData);
        //console.log("Profissionais token count:", tokenCount);
       // console.log(JSON.stringify(filteredData, null, 2));
       return filteredData
    } catch (error) {
        console.error("Error fetching profissionais:", error);
    }
};

//Est√° me retornando corretamente os profissionais e suas respectivas especialidades. O problema √© que as especialidades n√£o est√£o ligadas aos procedimentos. Como resolver isso ?


const clinicInfo = {
  "clinic": {
    "name": "CPP",
    "units": [
      { "id": 1, "name": "Unidade 1 - Joaquim Nabuco", "address": "Rua Joaquim Nabuco, 584, Centro" },
      { "id": 2, "name": "Unidade 2 - Areia Branca", "address": "Rua do Juazeiro, 6" },
      { "id": 3, "name": "Unidade 3 - Tobias Barreto", "address": "Rua Tobias Barreto, 102, Centro" }
    ]
  }
};
function getDayOfWeek(date) {
  const dias = [ 
      "SEGUNDA FEIRA", 
      "TER√áA FEIRA", 
      "QUARTA FEIRA", 
      "QUINTA FEIRA", 
      "SEXTA FEIRA", 
      "S√ÅBADO",
      "DOMINGO"
  ];
  // Verifica se a data √© uma inst√¢ncia v√°lida de Date
  if (!(date instanceof Date)) {
      date = new Date(date); // Tenta converter
  }
  // Verifica se a convers√£o foi bem-sucedida
  if (isNaN(date)) {
      throw new Error("Data inv√°lida fornecida para getDayOfWeek.");
  }
  return dias[date.getDay()];
}

const detectIntent = async (body, adminId, userSession, client, from) => {

  function ativarAtendimentoHumano(adminId, from) {
    if (!userSession) return;
  
    userSession.atendenteHumano = true;
    console.log(`ü§ñ Atendimento humano ativado para ${from}. Chatbot pausado por 30 minutos.`);
  
    setTimeout(() => {
        userSession.atendenteHumano = false;
        console.log(`‚úÖ Chatbot reativado para ${from}.`);
    }, 30 * 60 * 1000); // 30 minutos
  }

  try {
   
    console.log("userSession", userSession)
   
        const procedimentosData = await procedimentos();
        const especialidadesData = await especialidades();
        const conveniosData = await convenios();
        const profissionaisData = await profissionais();
        const formattedUnidades = clinicInfo.clinic.units.map(u => `id ${u.id} ${u.name}`).join('; ');
        const formattedProcedures = procedimentosData.map(p => {
    const conveniosInfo = p.convenios.map(c => `Conv√™nio ${c.idConvenio} ${c.nomeConvenio}: R$${c.valor}`).join(', ');
    return `Id do procedimento: ${p.idProcedimento} - Nome: ${p.nomeProcedimento} Convenios e valores:(${conveniosInfo})`; // Incluindo o idProcedimento
}).join('; ');
const format1Procedures = procedimentosData.map(p => 
  `${p.idProcedimento} - ${p.nomeProcedimento}`
).join("; ");
//console.log("Procedimentos formatados:", formattedProcedures)
        const formattedProfessionals = profissionaisData.map(pro =>
          `id ${pro.idProfissional} ${pro.nomeProfissional} 
          (${pro.especialidades.map(e => e.nomeEspecialidade).join(', ')})
          Unidades: ${pro.horarios.map(h => `${h.idUnidade} (${h.diaSemana} das ${h.inicioHorario} √†s ${h.finalHorario})`).join('; ')}`  
        ).join('; ');
        const format1Professionals = profissionaisData.map(pro => `id ${pro.idProfissional} ${pro.nomeProfissional}`).join('; ');
        const formattedConvenios = conveniosData.map(pro => `id ${pro.idConvenio} ${pro.nomeConvenio}`).join('; ');
        const formattedEspecialidades = especialidadesData.map(pro => `id ${pro.idEspecialidade} ${pro.nomeEspecialidade}`).join('; ');

        async function retornaHorario() {
          try {
              let completionHorarios = [];
              let unidadesSelecionadas = new Set(); // Garante que s√≥ temos 3 unidades diferentes
              const unidades = [1, 2, 3]; // IDs das unidades dispon√≠veis
              const agora = new Date();
              const horaBrasilia = new Date(agora.getTime() - agora.getTimezoneOffset() * 60000);
              const dataAtual = horaBrasilia.toISOString().split("T")[0]; // formato YYYY-MM-DD
              const horaAtual = horaBrasilia.toTimeString().split(" ")[0]; // formato HH:MM:SS
      
              console.log("Agora:", agora);
              console.log("A data atual √©", dataAtual, "e a hora atual √©", horaAtual);
      
              // Define se a busca ser√° filtrada por uma data espec√≠fica ou n√£o
              const dataBusca = userSession.date || null;
              console.log(`üìÖ Buscando hor√°rios para a data: ${dataBusca ? dataBusca : "data mais pr√≥xima dispon√≠vel"}`);
      
              for (const unidade of unidades) {
                  if (unidadesSelecionadas.size >= 3) break; // Garante que teremos no m√°ximo 3 unidades diferentes
      
                  let response = await axios.get(
                      `https://cpp.focuscw.com.br/datasnap/rest/TCalendarController/consultaAgendamentoUnidadeEspecialidade/${unidade}/${userSession.procedureId}?s=true`, { timeout: 120000, httpsAgent: agent }
                      );
                  console.log(`üì° Buscando hor√°rios para especialidade ${userSession.procedureId} na unidade ${unidade}`);
                  
                  if (response.data.length > 0) {
                      // Ordena os hor√°rios por data
                      let horariosDisponiveis = response.data.sort((a, b) => new Date(a.dataAgenda) - new Date(b.dataAgenda));
      
                      // üîπ Se userSession.date estiver definido, filtra apenas os hor√°rios dessa data
                      if (dataBusca) {
                          horariosDisponiveis = horariosDisponiveis.filter(horario => horario.dataAgenda === dataBusca);
                      } else {
                          // üîπ Se userSession.date N√ÉO estiver definido, busca a data mais pr√≥xima COM HOR√ÅRIOS V√ÅLIDOS
                          horariosDisponiveis = horariosDisponiveis.filter(horario =>
                              new Date(horario.dataAgenda) >= new Date(dataAtual)
                          );
                      }
      
                      // Se ainda n√£o h√° hor√°rios dispon√≠veis, pula para a pr√≥xima unidade
                      if (horariosDisponiveis.length === 0) continue;
      
                      for (const horario of horariosDisponiveis) {
                          for (const slot of horario.horarios) {
                              const diaSemanaPaciente = getDayOfWeek(horario.dataAgenda);
                            //  console.log("O dia da semana escolhido pelo paciente foi", diaSemanaPaciente)
                              // üîπ Remover hor√°rios que j√° passaram no mesmo dia
                              const horarioAgenda = new Date(horario.dataAgenda + 'T' + slot.horaAgenda); // Cria o objeto Date completo
      
                              if (horarioAgenda <= new Date()) {
                                  console.log(`‚è≥ Removendo hor√°rio passado: ${slot.horaAgenda} do dia ${dataAtual}`);
                                  continue; // Pula para o pr√≥ximo hor√°rio
                              }
      
                              // Busca os profissionais compat√≠veis para este hor√°rio e unidade
                              const profissionaisCompat√≠veis = profissionaisData.filter(prof =>
                                  prof.especialidades.some(esp => esp.idEspecialidade === userSession.procedureId) &&
                                  prof.horarios.some(horarioProf =>
                                      horarioProf.idUnidade === unidade &&
                                      horarioProf.diaSemana === diaSemanaPaciente &&
                                      slot.horaAgenda >= horarioProf.inicioHorario &&
                                      slot.horaAgenda <= horarioProf.finalHorario
                                  )
                              );
      
                              // üîπ Verificar se o profissional realmente atende nesse hor√°rio espec√≠fico
                              const profissionalValido = profissionaisCompat√≠veis.find(prof =>
                                  prof.horarios.some(horarioProf =>
                                      horarioProf.idUnidade === unidade &&
                                      horarioProf.diaSemana === diaSemanaPaciente &&
                                      slot.horaAgenda >= horarioProf.inicioHorario &&
                                      slot.horaAgenda <= horarioProf.finalHorario
                                  )
                              );
      
                              if (profissionalValido && !unidadesSelecionadas.has(unidade)) {
                                  completionHorarios.push({
                                      unidade: horario.nomeUnidade,
                                      idUnidade: horario.idUnidade,
                                      dataAgenda: horario.dataAgenda,
                                      idAgenda: slot.idAgenda,
                                      horaAgenda: slot.horaAgenda,
                                      idProfissional: profissionalValido.idProfissional,
                                      nomeProfissional: profissionalValido.nomeProfissional
                                  });
      
                                  unidadesSelecionadas.add(unidade); // Adiciona a unidade √† lista de selecionadas
      
                                  console.log(
                                      `üìå Unidade: ${horario.nomeUnidade} - Hor√°rio dispon√≠vel: ${slot.horaAgenda} - Profissional: ${profissionalValido.nomeProfissional}`
                                  );
      
                                  break; // Garante que pegamos apenas 1 hor√°rio por unidade
                              }
                          }
                      }
                  }
              }
      
              console.log("‚úÖ Hor√°rios finalizados:", completionHorarios);
              return completionHorarios;
          } catch (error) {
              console.error("‚ùå Erro ao buscar hor√°rios:", error);
              return [];
          }
      }
      
      
      
      async function buscarHorariosProfissional(professionalId, procedureId) {
        try {
            console.log(`üîç Buscando hor√°rios para Profissional: ${professionalId}, Especialidade: ${procedureId}`);
    
            const unidades = [1, 2, 3]; // IDs das unidades dispon√≠veis
            let horariosDisponiveis = [];
            const agora = new Date();
            const horaBrasilia = new Date(agora.getTime() - agora.getTimezoneOffset() * 60000);
            console.log("O hor√°rio de Brasilia √©:", horaBrasilia)
            const dataAtual = horaBrasilia.toISOString().split("T")[0]; // formato YYYY-MM-DD
            const horaAtual = horaBrasilia.toTimeString().split(" ")[0]; // formato HH:MM:SS
    
            const dataFiltro = userSession && userSession.date ? userSession.date : null;
    
            for (const unidade of unidades) {
                const response = await axios.get(`https://cpp.focuscw.com.br/datasnap/rest/TCalendarController/consultaAgendamentoUnidadeEspecialidadeProfissional/${unidade}/${procedureId}/${professionalId}?s=true`, { timeout: 120000, httpsAgent: agent });
    
                console.log(`‚úÖ Buscando hor√°rios na unidade ${unidade}...`);
    
                response.data.forEach(horario => {
                    if (dataFiltro && horario.dataAgenda !== dataFiltro) {
                        return;
                    }
    
                    horario.horarios.forEach(slot => {
                      const dataHoraSlot = new Date(`${horario.dataAgenda}T${slot.horaAgenda}`);

                      if (dataHoraSlot.getTime() <= agora.getTime()) {
                        console.log(`‚è≥ Ignorando hor√°rio passado: ${slot.horaAgenda} do dia ${horario.dataAgenda}`);
                        return;
                    }
    
                        horariosDisponiveis.push({
                            unidade: horario.nomeUnidade,
                            idUnidade: horario.idUnidade,
                            dataAgenda: horario.dataAgenda,
                            horaAgenda: slot.horaAgenda,
                            idAgenda: slot.idAgenda
                        });
                    });
                });
            }
    
            // Ordenar por data e hora
            horariosDisponiveis.sort((a, b) => new Date(a.dataAgenda + " " + a.horaAgenda) - new Date(b.dataAgenda + " " + b.horaAgenda));
    
            // Garantir que sempre retorne 3 op√ß√µes
            return horariosDisponiveis.slice(0, 3);
        } catch (error) {
            console.error("‚ùå Erro ao buscar hor√°rios do profissional:", error);
            return [];
        }
    }

        async function processaEscolhaHorario(horaUsuario) {
          try {
              console.log(`üîç Buscando hor√°rio correspondente para: ${horaUsuario}`);
      
              let horariosDisponiveis = [];
      
              // üîπ Verifica se um profissional espec√≠fico foi escolhido
              if (userSession.professionalId) {
                  horariosDisponiveis = await buscarHorariosProfissional(userSession.professionalId, userSession.procedureId);
              } else {
                  horariosDisponiveis = await retornaHorario();
              }
      
              console.log("üìÖ Hor√°rios dispon√≠veis:", horariosDisponiveis);
      
              // üîπ Se n√£o h√° hor√°rios dispon√≠veis, retorna valores nulos
              if (!horariosDisponiveis || horariosDisponiveis.length === 0) {
                  console.log("‚ùå Nenhum hor√°rio dispon√≠vel encontrado.");
                  return { idAgenda: null, horaAgenda: null, idUnidade: null, professionalId: null, date: null };
              }
      
              // üîπ Procura um hor√°rio correspondente
              const horarioEscolhido = horariosDisponiveis.find(h => h.horaAgenda === horaUsuario);
      
              if (horarioEscolhido) {
                  console.log(`‚úÖ Hor√°rio encontrado! ID: ${horarioEscolhido.idAgenda}, Hora: ${horarioEscolhido.horaAgenda}, Unidade: ${horarioEscolhido.idUnidade}`);
      
                  // üîπ Atualiza a sess√£o do usu√°rio
                  userSession.idAgenda = horarioEscolhido.idAgenda;
                  userSession.horaAgenda = horarioEscolhido.horaAgenda;
                  userSession.idUnidade = horarioEscolhido.idUnidade;
                  userSession.date = horarioEscolhido.dataAgenda;
      
                  // üîπ Se o hor√°rio foi buscado por um profissional, mantemos esse ID
                  if (userSession.professionalId) {
                      return {
                          idAgenda: horarioEscolhido.idAgenda,
                          horaAgenda: horarioEscolhido.horaAgenda,
                          idUnidade: horarioEscolhido.idUnidade,
                          professionalId: userSession.professionalId,
                          date: horarioEscolhido.dataAgenda
                      };
                  }
      
                  // üîπ Caso contr√°rio, verifica se `horarioEscolhido` tem `idProfissional`
                  if (horarioEscolhido.idProfissional) {
                      userSession.professionalId = horarioEscolhido.idProfissional;
                  }
      
                  return {
                      idAgenda: horarioEscolhido.idAgenda,
                      horaAgenda: horarioEscolhido.horaAgenda,
                      idUnidade: horarioEscolhido.idUnidade,
                      professionalId: userSession.professionalId || null,
                      date: horarioEscolhido.dataAgenda
                  };
              }
      
              console.log("‚ùå Nenhum hor√°rio correspondente foi encontrado.");
              return { idAgenda: null, horaAgenda: null, idUnidade: null, professionalId: null, date: null };
      
          } catch (error) {
              console.error("üö® Erro em processaEscolhaHorario:", error);
              return { idAgenda: null, horaAgenda: null, idUnidade: null, professionalId: null, date: null };
          }
      }
      
      function formatarData(data, formato = "padrao") {
        if (!data) return null;
    
        const meses = [
            "janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
            "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"
        ];
    
        const [ano, mes, dia] = data.split("-");
    
        if (formato === "extenso") {
            return `${parseInt(dia)} de ${meses[parseInt(mes) - 1]} de ${ano}`;
        } else {
            return `${dia}/${mes}/${ano}`;
        }
    }

      async function processaEscolhaUnidade(unidadeUsuario) {
        try {
          console.log(`üîç Buscando unidade correspondente para: ${unidadeUsuario}`);
          const unidadesDisponiveis = await retornaHorario();
          console.log("üìÖ Hor√°rios dispon√≠veis:", unidadesDisponiveis);

          if (!unidadesDisponiveis || unidadesDisponiveis.length === 0){
              console.log("‚ùå Nenhum hor√°rio dispon√≠vel encontrado.");
              return { idAgenda: null, horaAgenda: null, idUnidade: null, professionalId: null };
                }

                const UnidadeEscolhida = unidadesDisponiveis.find(h => h.idUnidade === unidadeUsuario);
                if (UnidadeEscolhida) {
                  console.log(`‚úÖ Unidade encontrada! ID: ${UnidadeEscolhida.idUnidade}, Hora: ${UnidadeEscolhida.horaAgenda}, Id Hor√°rio: ${UnidadeEscolhida.idAgenda} com Profissional ${UnidadeEscolhida.idProfissional}`);
                  userSession.idUnidade = UnidadeEscolhida.idUnidade;
                  userSession.horaAgenda = UnidadeEscolhida.horaAgenda;
                  userSession.idAgenda = UnidadeEscolhida.idAgenda;
                  userSession.professionalId = UnidadeEscolhida.idProfissional;
                  console.log("üìù Atualizando userSession com unidade escolhida:", userSession);

                  return {
                    idAgenda: UnidadeEscolhida.idAgenda,
                    horaAgenda: UnidadeEscolhida.horaAgenda,
                    idUnidade: UnidadeEscolhida.idUnidade,
                    professionalId: UnidadeEscolhida.idProfissional
                    };
                    }
                    console.log("‚ùå Nenhuma unidade correspondente foi encontrada.");
                    return { idAgenda: null, horaAgenda: null, idUnidade: null, professionalId: null };
        } catch (error) {
          console.error("üö® Erro em processaEscolhaUnidade:", error);
          return { idAgenda: null, horaAgenda: null, idUnidade: null, professionalId: null }
      }}

      function formatarTelefone(telefone) {
        // Remove a parte do telefone ap√≥s o '@'
        let telefoneFormatado = telefone.split('@')[0];
      
        // Remove qualquer caractere n√£o num√©rico (caso haja)
        telefoneFormatado = telefoneFormatado.replace(/\D/g, '');
      
        // Formata para o formato desejado (se necess√°rio)
        if (telefoneFormatado.length === 13 && telefoneFormatado.startsWith('55')) {
          telefoneFormatado = telefoneFormatado.slice(2); // Remove o c√≥digo do pa√≠s (55)
        }
      
        return telefoneFormatado;
      }
      //const agendaData = await retornaHorario()
      

    let context = `
    Informa√ß√µes da Cl√≠nica: ${clinicInfo}
    Unidades: ${formattedUnidades}
    Especialidades Dispon√≠veis: ${formattedEspecialidades}
    Profissionais Dispon√≠veis: ${formattedProfessionals}
    Convenios disponiveis: ${formattedConvenios}
    ${userSession.context}
    `;

    // O context est√° ficando muito grande. Precisamos encontrar uma forma de fragmentar isso.

    const today = new Date()
    function getFormattedDate() {
    
      // Extrai o ano, o m√™s e o dia
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, '0'); // Adiciona zero √† esquerda
      const day = String(today.getDate()).padStart(2, '0'); // Adiciona zero √† esquerda
    
      // Retorna no formato "aaaa-mm-dd"
      console.log(day)
      return `${day}/${month}/${year}`;
    }
    const dateOnly = getFormattedDate();
    const paramsData = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `Voce √© responsavel por extrair o parametro data de um fluxo de conversa entre uma pessoa um uma ia, onde esta pessoa esta tentando marcar uma consulta para certa data, se voce identificar essa data SEMPRE retorne ela no formato aaaa-mm-dd, vamos supor que o usuario EXPLICITAMENTE queira para o dia mais proximo possivel, RETORNE OBRIGATORIAMENTE a data de hoje. se nao identificar nada retorne "null". LEMBRE SEMPRE que agora √© ${today} e FIQUE EM MENTE QUE hoje √© ${dateOnly}.
          Entrada:
          "Quero marcar para amanha"
          Sa√≠da: 2024-07-10 ( caso hoje seja dia 2024-07-09 )
          Entrada 2:
          "Quero marcar para hoje"
          Sa√≠da: 2024-07-09 ( caso hoje seja dia 2024-07-09 )
          Entrada 3: 
          "Quero marcar para o dia 19"
          Sa√≠da: 2024-07-19 ( caso hoje seja dia 2024-07-09 )
          Entrada 4: 
          "Quero marcar para pr√≥xima quinta"
          Sa√≠da: 2024-07-11 ( caso hoje seja dia 2024-07-09, uma ter√ßa-feira )
          Entrada 5: 
          "Quero para quinta"
          Sa√≠da: 2024-07-11 ( caso hoje seja dia 2024-07-09, uma ter√ßa-feira )
          Entrada 6:
          "Quero marcar um ginecologista"
          Sa√≠da: null
          Entrada 7:
          "Particular"
          Sa√≠da: null
          Fique atento ao fluxo de conversa para n√£o trocar a data o tempo todo. Apenas atualize a data novamente se corroborar com essas premissas:
          1. userSession.date vazio em ${userSession.date}
          2. usu√°rio pediu explicitamente por outra data. Exemplo: "Veja se consegue para quarta ent√£o"
          
          Observa√ß√£o: se atente ao contexto para caso o usu√°rio ou a atendente tenha informado a data anteriormente ou de outra forma: ${userSession.context}
        `
        },
        {
          role: "user",
          content: body,
        },
      ],
    });
    
    let data = paramsData.choices[0].message.content;
    const datePattern = /^\d{4}-\d{2}-\d{2}$/;
    if (data !== "null" && datePattern.test(data)) {
      console.log('Data extra√≠da:', data); // Verifique se a data foi extra√≠da corretamente.
      userSession.date = data;
    } else {
      console.warn("Data inv√°lida recebida:", data);
    }

    const paramsProcediment = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `Voce √© responsavel por extrair o parametro id de um fluxo de conversa entre uma pessoa e uma ia, de uma especialidade que o usuario escolher, lembrando este √© um fluxo de conversa para agendamento de consultas, exames ou procedimentos, se por acaso detectar um procedimento que o usuario quer fazer, associe com sua respectiva especialidade e retorne UNICAMENTE o id, se nao identificar nada que seja equivalente aos disponiveis abaixo retorne somente a palavra "null". Ex.: Se na conversa o usu√°rio quiser marcar uma consulta de fisioterapia e a Fisioterapia estiver disponivel na lista de especialidades, e o id da fisioterapia for 1. VOCE VAI RETORNAR UNICAMENTE O 1, sem as aspas
        Lembre que para qualquer tipo de exame laboratorial como exame de sangue (hemograma completo, acido folico, creatinina, etc), retorne o id da especialidade de exames laboratoriais que √© 79
        Exemplo 2:
        Quero marcar uma endoscopia -> 23
        Exemplo 3: "Queria marcar um preventivo" -> 45
        Exemplo 4: "Quero marcar uma consulta com o gastroenterologista" -> 67
        Exemplo 5: "Quero marcar um ultrassom" -> 33
        Exemplo 6: "Quero saber sobre o neuro"-> 69
        Exemplo 7: "Quero marcar um pediatra para meu filho" -> 1
        Exemplo 8: "Quero fazer uma bi√≥psia" -> 79
        Exemplo 9: "Voces tem otorrino ?" -> 51
        aqui est√£o os procedimentos disponiveis:
        ${formattedProcedures}
        e aqui est√° a lista de especialidades onde voce vai associar e tirar o id:
        ${formattedEspecialidades}
        `
        },
        {
          role: "user",
          content: body,
        },
      ],
    });

    let procedureId = paramsProcediment.choices[0].message.content.trim();
    procedureId = procedureId !== "null" ? Number(procedureId) : null;

    if (procedureId !== null && !isNaN(procedureId)) {
      userSession.procedureId = procedureId;
      console.log('Procedure ID:', procedureId); // Verifique se o ID do procedimento foi extra√≠do corretamente.
    } else {
      console.log('No valid procedure ID found.');
    }


  // Fun√ß√£o para extrair o ID do procedimento
      const paramsConsulta = await openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            {
                role: "system",
                content: `Voc√™ deve extrair o ID da consulta/exame a partir do fluxo de conversa entre o usu√°rio e uma IA. 
                Se detectar um procedimento, retorne somente o ID correspondente, sem aspas.
                Exemplo: "Quero marcar uma consulta com ortopedista" ‚Üí 15980 (assumindo que o ID do servi√ßo Consulta com ortopedista seja 15980).
                Exemplo 2: "Quero marcar uma endoscopia" -> 6460
                Exemplo 3: "Quero marcar um ginecologista" -> 16381
                Exemplo 4: "Quero marcar um cardiologista" -> 15975
                Exemplo 5: "Queria uma consulta com end√≥crino" -> 15978
                Exemplo 5: "Quero uma consulta com o gastroenterologista" -> 15979
                Exemplo 6: "Queria marcar um preventivo" -> 15970
                Exemplo 7: "Quero marcar um ultrassom" -> 162
                Exemplo 8: "Consulta com neuro" -> 16382
                Exemplo 9: "Quero marcar um pediatra para meu filho" -> 16383
                Exemplo 10: "Quero fazer uma bi√≥psia" -> 2167
                Exemplo 11: "Voces tem otorrino?" -> 16366
                Preste aten√ß√£o ao contexto para n√£o ficar atualizando o tempo todo. S√≥ passe o procedimetno que o paciente EXPLICITAMENTE solicitou. N√£o atualize o ID se o atual (${userSession.idConsulta}) ainda for v√°lido.
                Se n√£o identificar nenhum procedimento, retorne "null".
                Procedimentos dispon√≠veis: ${format1Procedures}
               Contexto: ${userSession.context}`,
            },
            { role: "user", content: body }
        ]
      });
  
      let consulta = paramsConsulta.choices[0].message.content.trim();
      console.log("Aqui a consulta √©", consulta)
      consulta = consulta !== "null" ? Number(consulta) : null;
      if (consulta !== null && !isNaN(consulta)) {
        userSession.idConsulta = consulta;
        if ([7027, 803, 16805, 16806, 16902, 16808, 161, 15553, 16688, 1350, 8096, 7621, 7622, 7623, 16365, 16364, 16804, 16803, 15634].includes(userSession.idConsulta)) {
          console.log("Transferindo para atendente humano...");
          await client.addOrRemoveLabels(from, [{labelId: '7' , type:'add'}]);
          await client.sendText(from, "‚úÖ Estamos te transferindo para uma atendente humana para finalizar o agendamento para o procedimento escolhido. Por favor, aguarde um momento.");
          ativarAtendimentoHumano(adminId, from)
      
          return; 
        }
      } else {
        console.log('No valid consulta ID found.');
      }

      function getValorByConvenio() {
        console.log("üõ† Debug - Entrando na fun√ß√£o getValorByConvenio()");
        console.log("üîç Procedimento atual:", userSession.idConsulta);
        console.log("üîç Conv√™nio atual:", userSession.convenioId);
      
        if (!userSession.idConsulta || !userSession.convenioId) {
          console.warn("‚ö†Ô∏è userSession.idConsulta ou userSession.convenioId n√£o definidos.");
          return;
        }
      
        const procedure = procedimentosData?.find(p => p.idProcedimento === userSession.idConsulta);
        if (!procedure) {
          console.warn("‚ö†Ô∏è Nenhum procedimento encontrado para idConsulta:", userSession.idConsulta);
          return;
        }
      
        const convenio = procedure?.convenios?.find(c => c.idConvenio === userSession.convenioId);
        if (!convenio) {
          console.warn("‚ö†Ô∏è Nenhum conv√™nio encontrado para convenioId:", userSession.convenioId);
          return;
        }
      
        userSession.valor = convenio.valor;
        console.log(`‚úÖ Valor atualizado: R$${userSession.valor}`);
      }

    const paramsConvenio = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© respons√°vel por extrair o par√¢metro id de um fluxo de conversa entre uma pessoa e uma IA, referente ao conv√™nio m√©dico que o usu√°rio informar. Este √© um fluxo de conversa para agendamento de consultas, exames ou procedimentos.  
          
          Se detectar um conv√™nio mencionado pelo usu√°rio e ele estiver dispon√≠vel na lista abaixo, retorne UNICAMENTE o id correspondente.  
          
          Se n√£o identificar nenhum conv√™nio equivalente aos dispon√≠veis abaixo, retorne somente a palavra "null".  

          Se o usu√°rio disser que quer fazer pelo particular, retorne somente **0** ( sem aspas )
          
          Exemplo: Se o usu√°rio disser que tem conv√™nio UNIMED e o id da UNIMED for 2, voc√™ deve retornar **2** (sem aspas).
          Exemplo 2:
          Entrada: "Quero fazer pelo particular" 
          Sa√≠da: "0"
          Entrada 3: "Quero marcar um ortopedista"
          Sa√≠da 3: "null"
          
          Aqui est√° a lista de conv√™nios dispon√≠veis:
          ${formattedConvenios}
          `
        },
        {
          role: "user",
          content: body,
        },
      ],
    });
    
    let convenioId = paramsConvenio.choices[0].message.content.trim();
    convenioId = convenioId !== "null" ? Number(convenioId) : null;
    
    if (convenioId !== null && !isNaN(convenioId)) {
      userSession.convenioId = convenioId;
      console.log('Conv√™nio ID:', convenioId); // Verifique se o ID do conv√™nio foi extra√≠do corretamente.
      if (convenioId !== 0 ){
        await client.addOrRemoveLabels(from, [{labelId: '7' , type:'add'}]);
        await client.sendText(from, "‚úÖ Estamos te transferindo para uma atendente humana para finalizar o agendamento pelo plano de sa√∫de. Aguarde um momento. ")
        ativarAtendimentoHumano(adminId, from)
        return; 
      }
    } else {
      console.log('Nenhum conv√™nio v√°lido encontrado.');
    }

    const paramsUnidade = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
          {
              role: "system",
              content: `
  Voc√™ √© respons√°vel por extrair o id da unidade escolhida pelo usu√°rio para o agendamento. 
  Se identificar a unidade, retorne UNICAMENTE o id dela. Caso contr√°rio, retorne "null". 
  S√≥ retorne a unidade se ela for explicitamente declarada pelo usu√°rio usando termos como:
"na unidade", "no local", "no endere√ßo", nome da unidade ou n√∫mero da unidade.
  Exemplo:
  Entrada: "Quero marcar na unidade Centro"
  Sa√≠da esperada: 3 
  (se o id da unidade Centro for 3. Sempre em n√∫mero, n√£o string. N√£o retorne com aspas.)
  Exemplo alternativo:
  Mensagem anterior da assistente: "Temos um hor√°rio dispon√≠vel na Areia Branca √†s 10h." 
  Resposta do usu√°rio: "Pode ser"
  Sa√≠da esperada: 2 (se o id da unidade Areia Branca for 2)
  Entrada 2: "Quero marcar uma consulta com dr Acrisio joao"
  Sa√≠da: null
  Exemplo alternativo:
  Mensagem anterior da assistente: "1-Tobias barreto com dr Jo√£o dia 20/03 √°s 13:00 /n 2-Areia branca com dr Fernanda dia 21 √°s 13:00"
  Resposta do usu√°rio: "1"
  Sa√≠da esperada: 3 (o valor da unidade Tobias barreto √© 3)
  Unidades dispon√≠veis: ${formattedUnidades}
  fique atento ao preenchimento da unidade em ${userSession.idUnidade} e ao contexto ${userSession.context}`
  
          },
          { role: "user", content: body },
      ],
  });
  
  console.log("Unidade detectada:", paramsUnidade.choices[0].message.content);
  let unidadeId = paramsUnidade.choices[0].message.content.trim();
  console.log("Unidade detectada:", unidadeId)
  unidadeId = unidadeId !== "null" ? Number(unidadeId) : null;
  if (unidadeId !== null && !isNaN(unidadeId)) {
    console.log("Unidade veio no formato correto")
      userSession.idUnidade = unidadeId;
      const resultado = processaEscolhaUnidade(unidadeId)
  } else {
      console.log("Unidade n√£o detectada");
  }

  if (userSession.convenioId !== null && userSession.convenioId !== undefined && userSession.idUnidade) {
    try {
      console.log("üöÄ Entrou no bloco de verifica√ß√£o!");
  
      if (userSession.convenioId == 0) {
        console.log("üìå convenioId √© 0. Atualizando para unidade correta...");
  
        if (userSession.idUnidade == 1) {
          userSession.convenioId = 66;
        } else if (userSession.idUnidade == 2) {
          userSession.convenioId = 67;
        } else if (userSession.idUnidade == 3) {
          userSession.convenioId = 79;
        }
  
        console.log("‚úÖ convenioId atualizado para:", userSession.convenioId);
        getValorByConvenio(); // Agora deve ser chamado
      } else {
        console.log("‚ö†Ô∏è convenioId n√£o √© 0. Nada foi alterado.");
      }
    } catch (error) {
      console.error("‚ùå Erro ao atualizar o convenio:", error);
    }
  } else {
    console.log("‚ö†Ô∏è userSession.convenioId ou userSession.idUnidade est√£o indefinidos. Pulando atualiza√ß√£o.");
  }
    
    const paramsProfessional = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© respons√°vel por extrair o id do profissional EXPLICITAMENTE escolhido pelo paciente. Caso identifique o profissional, retorne UNICAMENTE o seu id. Caso n√£o tenha EXPLICITAMENTE encontrado um profissional, retorne null. Lembre-se que escolher uma especialidade n√£o significa escolher o profissional. Exemplo de aplica√ß√£o:
          Entrada: "Quero marcar com o Dr. Acrisio Joao"
          Sa√≠da esperada: 233 (se o id do Dr. Acrisio Joao for 233)

          Exemplo alternativo:
          Entrada: "Quero marcar com um cardiologista"
          Sa√≠da esperada: null

          Profissionais dispon√≠veis: ${format1Professionals}. Aqui est√° o Fluxo de conversa: ${userSession.context}
        `
        },
        {
          role: "user",
          content: body,
        },
      ],
    });

    let professionalId = paramsProfessional.choices[0].message.content.trim(); 
    //console.log("üìã Lista de profissionais carregada:", JSON.stringify(profissionaisData, null, 2), "Sucesso");
    console.log("üßê Profissional identificado:", professionalId);
    if (professionalId !== null) {
      console.log("Entrou na verifica√ß√£o do profissional")
      let profissionalEncontrado = profissionaisData.find(pro => pro.idProfissional === professionalId);
      if (profissionalEncontrado) {
        userSession.professionalId = profissionalEncontrado.idProfissional;
        console.log("O profissional foi encontrado na lista")
        // Se o usu√°rio escolheu um m√©dico, garantir que um procedimento associado seja definido
        if (!userSession.procedureId && profissionalEncontrado.especialidades.length > 0) {
          userSession.procedureId = profissionalEncontrado.especialidades[0].idEspecialidade;
          console.log("Associado procedureId:", userSession.procedureId);
        }
      } else{
        console.log("Profissional n√£o foi identificado na lista")
      }
    }

    const paramsShift = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© respons√°vel por extrair o turno que o usuario vai querer marcar sua consulta ou exame a partir de um fluxo de conversa abaixo entre o usuario e uma IA. o turno pode ser manha tarde o noite, se for manha retorne "1", se for tarde retorne "2". Se n√£o identificar nenhum turno na mensagem retorne "null".
        Entrada:
        "Quero marcar pela manh√£"
        Sa√≠da esperada: 1
        Entrada2:
        "Pode ser pela tarde?"
        Sa√≠da esperada: 2
        Entrada3: 
        "Quero marcar uma consulta para quarta"
        Sa√≠da esperada: null
        Fluxo de conversa:
        ${userSession.context}
        `
        },
        {
          role: "user",
          content: body,
        },
      ],
    });

    const shift = paramsShift.choices[0].message.content.trim();

    if (shift !== "null") {
      userSession.shift = shift
    }
   
  
  let dayOfToday = getDayOfWeek(new Date() - 1);
  console.log(new Date())
  console.log("Today is :"+ dayOfToday)     ;
  let completionHorarios = [];
  let agendaData;

  if(userSession.procedureId && userSession.professionalId && !userSession.idUnidade){
    console.log("Buscando hor√°rios dispon√≠veis p/ profissional desejado...");
    try{
      agendaData = await buscarHorariosProfissional(userSession.professionalId, userSession.procedureId);
      console.log("Hor√°rios dispon√≠veis p/ profissional desejado:", agendaData);
      if (agendaData.length > 0) {
        const mensagemHorarios = agendaData.slice(0, 3).map((h, index) => 
          `${index + 1}. üìç Unidade: ${h.unidade}\nüìÖ Data: ${formatarData(h.dataAgenda, "extenso")}\n‚è∞ Hor√°rio: ${h.horaAgenda}H`
      ).join("\n\n");
  
        const mensagem = ` Voce √© uma assistente de uma cl√≠nica e seu papel √© mandar uma mensagem para o paciente informando os hor√°rios dispon√≠veis do profissional que ele selecionou. Aqui est√£o os pr√≥ximos hor√°rios dispon√≠veis:\n\n${mensagemHorarios}\n\n Pe√ßa para que o paciente escolha o melhor hor√°rio para ele.`;
        const completionHorario = await openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            { role: "system", content: mensagem }
          ]
        });
        console.log("Mensagem para o paciente:", completionHorario.choices[0].message.content);
        if(userSession.convenioId !== 0){
          return "Voc√™ gostaria de realizar essa consulta particular ou pelo plano de sa√∫de ? \n ( Caso seja plano de sa√∫de, poderia nos dizer qual o seu plano ? )"
        }
        return completionHorario.choices[0].message.content
      } else if (agendaData.length === 0) {
        const promptSemHorario = `Diga SEMPRE que Infelizmente, n√£o encontramos hor√°rios dispon√≠veis para a data escolhida.  
    Por favor, escolha uma nova data para verificarmos a disponibilidade.  
    Sugira uma data futura que funcione melhor para voc√™.`;
    
        const completionSemHorario = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: promptSemHorario }
            ]
        });
        console.log("Mensagem para reagendamento:", completionSemHorario.choices[0].message.content);
        if(userSession.convenioId !== 0){
          return "Voc√™ gostaria de realizar essa consulta particular ou pelo plano de sa√∫de ? \n ( Caso seja plano de sa√∫de, poderia nos dizer qual o seu plano ? )"
        }
        console.log("Transferindo para atendente humano...");
        await client.addOrRemoveLabels(from, [{labelId: '7' , type:'add'}]);

          await client.sendText(from, "‚úÖ Estamos te transferindo para uma atendente humana para finalizar o agendamento para o procedimento escolhido. Por favor, aguarde um momento.");
          ativarAtendimentoHumano(adminId, from)

          return; 
    }
    }catch(error){console.log("‚ùå Erro ao buscar hor√°rios dispon√≠veis p/ profissional desejado:", error)}
  }
  
  if (userSession.procedureId && !userSession.idUnidade && !userSession.professionalId) {
    console.log("Buscando hor√°rios dispon√≠veis...");
    
   try{
    if (userSession.idUnidade) {
      console.log(`‚úÖ Unidade j√° escolhida: ${userSession.idUnidade}. Pulando nova busca.`);
      return;
  }
     agendaData = await retornaHorario()
     console.log("Hor√°rios dispon√≠veis:", agendaData);
     console.log(agendaData);
        if (agendaData.length > 0) {
          const promptMensagem = `Voc√™ √© um assistente de uma cl√≠nica.
      Aqui est√£o os hor√°rios dispon√≠veis para a data escolhida:
      ${agendaData.slice(0, 3).map((h, index) => 
        `${index + 1}. üìç ${h.unidade}: ${formatarData(h.dataAgenda, "extenso")} √†s ${h.horaAgenda}H com Dr. ${h.nomeProfissional}`
      ).join("\n")} Pergunte em qual unidade ele gostaria de se consultar ( sempre mostrando tamb√©m  o hor√°rio e o profissional que vai realizar, conforme o modelo acima)`
          const completionHorario = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
              { role: "system", content: promptMensagem }
            ]
          });
          console.log("Mensagem para o paciente:", completionHorario.choices[0].message.content);
          if(userSession.convenioId !== 0){
            return "Voc√™ gostaria de realizar essa consulta particular ou pelo plano de sa√∫de ? \n ( Caso seja plano de sa√∫de, poderia nos dizer qual o seu plano ? )"
          }
          return completionHorario.choices[0].message.content
        }  else if (agendaData.length === 0) {
          const promptSemHorario = `Diga SEMPRE que Infelizmente, n√£o encontramos hor√°rios dispon√≠veis para a data escolhida.  
      Por favor, escolha uma nova data para verificarmos a disponibilidade.  
      Sugira uma data futura que funcione melhor para voc√™.`;
      
          const completionSemHorario = await openai.chat.completions.create({
              model: "gpt-4o-mini",
              messages: [
                  { role: "system", content: promptSemHorario }
              ]
          });
          console.log("Mensagem para reagendamento:", completionSemHorario.choices[0].message.content);
          console.log("Transferindo para atendente humano...");
          await client.addOrRemoveLabels(from, [{labelId: '7' , type:'add'}]);
          await client.sendText(from, "‚úÖ Estamos te transferindo para uma atendente humana para finalizar o agendamento para o procedimento escolhido. Por favor, aguarde um momento.");
          ativarAtendimentoHumano(adminId, from)
          return; 
      }
    } catch (error) {
        console.error("Erro ao buscar hor√°rios:", error);
    }}

const paramsHora = await openai.chat.completions.create({
  model: "gpt-4o-mini",
  messages: [
    {
      role: "user",
      content: `Voce √© respons√°vel por extrair o hor√°rio escolhido pelo usu√°rio a partir de um fluxo de conversa abaixo entre o usuario e uma IA. O hor√°rio pode aparecer em v√°rias formas, como '10h', '10:00', '10 horas', '10 horas da manh√£', '10 horas da tarde', '10 horas da noite', "13:00:00", "10:00:00H" ou at√© mesmo ter selecionado entre uma lista de op√ß√µes oferecidas pela assistente dando respostas como "1". Se identificar o hor√°rio, retorne UNICAMENTE o hor√°rio no formato 00:00:00. Se n√£o identificar nenhum hor√°rio, retorne null 
      
      Fluxo de conversa:
      ${userSession.context}
      ` 
      },
      {
        role: "user",
        content: body,
      },
    ],
})

let hora = paramsHora.choices[0].message.content;
if (hora && /^\d{2}:\d{2}:\d{2}$/.test(hora)) {
  console.log("üïí Hora extra√≠da corretamente:", hora);
  userSession.horaAgenda = hora;
  const resultado = await processaEscolhaHorario(hora);
  console.log("Resultado final:", resultado)
}

    const paramsUserName = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© respons√°vel por extrair o nome completo do usu√°rio a partir de um fluxo de conversa abaixo entre o usuario e uma IA. O nome pode aparecer em v√°rias formas, como "Meu nome √© Jo√£o Marcos da Silva", "Sou a Maria", "Voc√™ pode me chamar de Carlos", etc. Se identificar o nome do usu√°rio, retorne UNICAMENTE o nome do usu√°rio. Se n√£o identificar nenhum nome, retorne "null".
        Fluxo de conversa:
        ${userSession.context}
        `
        },
        {
          role: "user",
          content: body,
        },
      ],
    });

    let userName = paramsUserName.choices[0].message.content.trim();

    if (userName !== "null") {
      userSession.name = userName
    }

    const paramsCPF = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© respons√°vel por extrair o CPF do usu√°rio a partir de um fluxo de conversa abaixo entre o usuario e uma IA. O CPF pode aparecer em v√°rias formas, como 17114536763, 171.145.367-63, 171145367-63, etc. Se identificar o CPF do usu√°rio, retorne UNICAMENTE o CPF do usu√°rio ( sem pontos ou tra√ßos e outros caracteres especiais). Se n√£o identificar nenhum CPF, retorne "null".
          Fluxo de conversa para facilitar:
        ${userSession.context}
        `
        },
        {
          role: "user",
          content: body,
        },
      ],
    })
    let cpf = paramsCPF.choices[0].message.content.trim();
    if (cpf !== "null") {
      userSession.cpf = cpf
      }

      const paramsDataNascimento = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© respons√°vel por extrair a data de nascimento do usu√°rio a partir de um fluxo de conversa abaixo entre o usu√°rio e uma IA. A data de nascimento pode aparecer em v√°rias formas, como 01/01/1990, 1990-01-01, 1 de janeiro de 1990, etc. Se identificar a data de nascimento do usu√°rio, retorne UNICAMENTE a data de nascimento no formato aaaa-mm-dd. Se n√£o identificar nenhuma data de nascimento, retorne "null".
      Fluxo de conversa para facilitar:
      ${userSession.context}
            `,
          },
          {
            role: "user",
            content: body,
          },
        ],
      });
      
      let dataNascimento = paramsDataNascimento.choices[0].message.content.trim();
      if (dataNascimento !== "null") {
          userSession.nascimento = dataNascimento; // Formato 'yyyy-mm-dd'
        } else {
          console.log("Data inv√°lida detectada:", dataNascimento);
        }
      

        const paramsAtendente = await openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [
            {
              role: "system",
              content: `Voc√™ √© respons√°vel por identificar se o usu√°rio deseja falar com uma atendente humana a partir do fluxo de conversa abaixo. 
              
              O usu√°rio pode expressar essa inten√ß√£o de diversas formas, como:
              - "Quero falar com uma atendente"
              - "Pode me transferir para um humano?"
              - "Preciso de ajuda de um atendente"
              - "Falar com algu√©m da equipe"
              - "Atendimento humano, por favor"
              
              Se identificar que o usu√°rio quer falar com uma atendente humana, retorne UNICAMENTE "sim".  
              Se o usu√°rio n√£o mencionar isso, retorne UNICAMENTE "n√£o".  
              
              Fluxo de conversa:
              ${userSession.context}
              `
            },
            {
              role: "user",
              content: body,
            },
          ],
        });
        
        let desejaAtendente = paramsAtendente.choices[0].message.content.trim();
        
        if (desejaAtendente === "sim") {
          await client.addOrRemoveLabels(from, [{labelId: '7' , type:'add'}]);
          await client.sendText(from, "‚úÖ Voc√™ foi transferido para uma atendente humana. Aguarde um momento.");
          ativarAtendimentoHumano(adminId, from)
          return;
        }



    if (userSession.name && userSession.idUnidade && userSession.idAgenda && userSession.date && userSession.procedureId && userSession.nascimento && userSession.agendado == false) {
      
      const axiosInstance = axios.create({
        timeout: 50000, // Aumentando o timeout para 15 segundos
      });
      
      const marcarHorario = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© um assistente de uma cl√≠nica. Contexto da conversa: ${userSession.context}. 
                      esta conversa √© um chat entre um usuario e uma assistente de cl√≠nica a sua fun√ß√£o aqui √© checar se a assistente 
                      apresentou um horario disponivel para consulta e se logo ap√≥s o usuario quis confirmar esta consulta
                      para o hor√°rio que a assim apresentou, caso sim retorne "true". Caso esse n√£o seja o caso retorne "false"`
          },
          {
            role: "user",
            content: body,
          },
        ],
      });

      let telefoneFormatado = formatarTelefone(from)


      if (marcarHorario.choices[0].message.content == 'true') {


        try {
          const appointmentData = {
            paciente: {
              nome: userSession.name,
              nascimento: userSession.nascimento || null,
              cpf: userSession.cpf || null,
              telefone: telefoneFormatado,
              idConvenio: userSession.convenioId || 79,
            },
            agendamentos: [{
              idAgenda: userSession.idAgenda,
              idUnidade: userSession.idUnidade,
              idProfissional: userSession.professionalId || null,
              idConvenio: userSession.convenioId || 79,
              idProcedimento: userSession.idConsulta || null,
              dataAgenda: userSession.date,
              horaAgenda: userSession.horaAgenda || null,
            }]
          };

          console.log("Enviando requisi√ß√£o para marcar consulta...", appointmentData);
          const response = await axiosInstance.post(`https://cpp.focuscw.com.br/datasnap/rest/TCalendarController/agendamentoSemPaciente/`, appointmentData)
          console.log("Resposta da API marca√ß√£o:", response.data);

          const marcado = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
              {
                role: "system",
                content: `Voc√™ √© um assistente de uma cl√≠nica. 
                          Quero que gere uma mensagem dizendo que a consulta esta marcada. A mensagem tem que conter data, hora, dia da semana, nome do Profissional, valor. Utilize como mensagem final a frase: "*CPP \n cuidando sempre de voc√™ üòä*" NUNCA USE "*" , "**" OU AT√â MESMO "#"
                          A data do agendamento √© ${formatarData(userSession.date, "extenso")}, com in√≠cio √†s ${userSession.horaAgenda}H o profissional √© ${userSession.professionalId} e o valor √© R$ ${userSession.valor} ( Nunca informe o valor null ). NUNCA USE NEGRITO, ASTER√çSCO, IT√ÅLICO, SUBLINHADO, HASHTAGS OU QUALQUER TIPO DE FORMATA√á√ÉO ESPECIAL/S√çMBOLO DE MARCA√á√ÉO EM NENHUMA DAS MENSAGENS E QUANDO FOR MANDAR A MENSAGEM DE CONFIRMA√á√ÉO LEMBRE-SE DE INCLUIR A DATA, HOR√ÅRIO, UNIDADE, M√âDICO E VALOR ( e falar que o atendimento √© por ordem de chegada ). Contexto da conversa: ${userSession.context}.
                         `
              },
              {
                role: "user",
                content: body,
              },
            ],
          });
          userSession.agendado = true
          console.log("o userSession:", userSession)
          console.log("Agendamento marcado com sucesso")
          console.log("Resposta da API:", marcado.data.choices[0].message.content);
         

          return marcado.choices[0].message.content;
        } catch (error) {
          if (error.response && error.response.status === 400) {
            await client.sendText(from, 'Desculpe, n√£o conseguimo realizar o seu agendamento. Para te ajudar com esse processo, estou te encaminhando para uma atendente humana');
            ativarAtendimentoHumano(adminId, from)
            console.log("N√£o marcou")
            return
          } else {
            //await client.sendText(from, 'Tivemos um pequeno problema ao marcar o hor√°rio. Por favor, tente novamente ou digite "falar com atendente" para que eu possa te transferir para uma atendente humana.');
          }
        }
      }
    }


    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
  content: `Voc√™ √© um assistente virtual da CPP ( Se apresente para o usu√°rio quando o usu√°rio mandar a primeira mensagem ).Sempre se apresente como assistente virtual da CPP, n√£o Clinica Popular de Petrolina. Sua fun√ß√£o √© atender os clientes, marcar consultas e exames, e tirar d√∫vidas gerais. Responda de maneira humanizada e suave, mas N√ÉO EXAGERE NO USO DE EMOJIS.NUNCA USE "*" , "**" OU AT√â MESMO "#". OBSERVA√á√ÉO IMPORTANTE: VOCE S√ì PODE DEIXAR O PACIENTE MARCAR UMA CONSULTA OU PROCEDIMENTO QUE ESTEJAM DENTRO DAS CADASTRADAS NA CL√çNICA EM ${format1Procedures}. Caso o paciente queira marcar algo fora dessa lista, diga que voce como IA n√£o est√° reconhecendo a consulta mas que para ele ter a melhor experiencia, precisa falar com uma atendente humana ( pergunte se ele gostaria de ser atendido por uma atendente humana). LEMBRE SEMPRE que agora √© ${today} e FIQUE EM MENTE QUE HOJE √© ${dateOnly}. Caso esteja mandando a mensagem de confirma√ß√£o de consulta, lembre de adicionar no final o SLOGAN "*CPP \n cuidando sempre de voc√™ üòä*". NUNCA em NENHUMA hip√≥tese fale que voce √© GPT. Tenha em mente que para marcar um exame, temos que ter em mente a especialidade(id) escolhido pelo paciente, data da consulta, CPF, nome completo e data de nascimento do paciente.  Lembre-se tamb√©m de sempre perguntar o nome completo da pessoa antes de tudo para ai sim proseguir com o fluxo de conversa (SEMPRE preste atencao no contexto da conversa pra ver se o nome ja n√£o foi informado, pra NUNCA precisar ficar pedindo o nome toda hora ao usuario e sempre chame o paciente pelo primeiro nome). os convenios/planos dispon√≠veis s√£o ${formattedConvenios}. Caso o CPF seja igual a null, solicite o CPF do paciente. Aqui est√° o CPF: ${userSession.cpf}. NUNCA SE ESQUE√áA DE PERGUNTAR A DATA DE NASCIMENTO. Caso a data de nascimento seja igual a null, solicite tamb√©m a data de nascimento do paciente. Aqui est√° a data de nascimento ${userSession.nascimento}.
   Caso o paciente pergunte o valor da consulta, pode informar para ele o valor SEMPRE contido em: R$ ${userSession.valor} ( Nunca informe o valor null ), sempre antes de falar o valor verifique se o campo ${userSession.valor} esta preenchido, caso n√£o esteja, pergunte sobre a unidade que ele gostaria de se consultar antes.NUNCA informe o valor null para o paciente. Caso o paciente manifeste interesse ESPECIFICAMENTE em marcar um RAIO X ( somente e explicitamente com o nome Raio X ), diga que para esse procedimento n√£o √© realizado o agendamento pois √© realizado por ordem de chegada na unidade Joaquim Nabuco. SEMPRE antes de mandar os hor√°rios certifique-se de que o paciente j√° tenha respondido se quer marcar pelo particular ou pelo plano em ${userSession.convenioId}. NUNCA USE NEGRITO, ASTER√çSCO, IT√ÅLICO, SUBLINHADO, HASHTAGS OU QUALQUER TIPO DE FORMATA√á√ÉO ESPECIAL/S√çMBOLO DE MARCA√á√ÉO EM NENHUMA DAS MENSAGENS E QUANDO FOR MANDAR A MENSAGEM DE CONFIRMA√á√ÉO LEMBRE-SE DE INCLUIR A DATA, HOR√ÅRIO, UNIDADE, M√âDICO E VALOR ( e falar que o atendimento √© por ordem de chegada ).
   Caso o paciente pergunte se voce faz o lembrete da consulta, diga que sim, voce faz um dia antes e no dia. Os profissionais dispon√≠veis na cl√≠nica s√£o esses ${formattedProfessionals}, SEMPRE que o paciente quiser marcar com algum especialista fora dessa lista diga que como IA voce n√£o reconheceu o profissional, mas para proporcionar uma melhor experiencia para ele, precisa falar com atendente humana ( pergunte se ele gostaria de falar com atendente humana ), do mesmo modo, sempre que o paciente quiser fazer algo fora do contexto dessa atendente virtual ( como pedir nota fiscal, pedir relat√≥rio, documento do exame, comprovante ), pergunte se o paciente gostaria de ser atendido por uma atendente humana. contexto da conversa at√© aqui: ${userSession.context}
        `
        },
        {
          role: "user",
          content: body,
        },
      ],
    });

    return completion.choices[0].message.content;
  } catch (error) {
    console.error('Erro ao obter detalhes da cl√≠nica:', error);
    
  }
}



module.exports = { detectIntent };
